#include <libssh/libssh.h>
#include <libssh/sftp.h>
#include <iostream>

int main() {
    ssh_session my_ssh_session = ssh_new();
    if (my_ssh_session == NULL) exit(-1);

    ssh_options_set(my_ssh_session, SSH_OPTIONS_HOST, "192.168.1.1");
    ssh_options_set(my_ssh_session, SSH_OPTIONS_USER, "root");

    int rc = ssh_connect(my_ssh_session);
    if (rc != SSH_OK) {
        std::cerr << "Error connecting: " << ssh_get_error(my_ssh_session) << std::endl;
        ssh_free(my_ssh_session);
        exit(-1);
    }

    rc = ssh_userauth_password(my_ssh_session, NULL, "CyberSec");
    if (rc != SSH_AUTH_SUCCESS) {
        std::cerr << "Error authenticating: " << ssh_get_error(my_ssh_session) << std::endl;
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        exit(-1);
    }

    ssh_channel channel = ssh_channel_new(my_ssh_session);
    if (channel == NULL) {
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        exit(-1);
    }

    rc = ssh_channel_open_session(channel);
    if (rc != SSH_OK) {
        ssh_channel_free(channel);
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        exit(-1);
    }

    rc = ssh_channel_request_exec(channel, "tar -cvf Backup.tar /path/to/data");
    if (rc != SSH_OK) {
        ssh_channel_close(channel);
        ssh_channel_free(channel);
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        exit(-1);
    }

    ssh_channel_close(channel);
    ssh_channel_free(channel);

    ssh_disconnect(my_ssh_session);
    ssh_free(my_ssh_session);

    // Для отправки архива на yandex.ru потребуется воспользоваться соответствующими API или библиотекой для HTTP-запросов.

    return 0;
}
